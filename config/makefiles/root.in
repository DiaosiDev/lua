# Copyright (C) 2005-2009, Parrot Foundation.
# $Id$

## arguments we want to run parrot with
PARROT_ARGS   :=

## configuration settings
VERSION       := @versiondir@
BIN_DIR       := @bindir@
LIB_DIR       := @libdir@$(VERSION)
DOC_DIR       := @docdir@$(VERSION)
MANDIR        := @mandir@$(VERSION)

# Set up extensions
LOAD_EXT      := @load_ext@
O             := @o@

# Various paths
PMC_DIR       := src/pmc
LIBPATH       := src/lib

## Setup some commands
MAKE          := @make_c@
PERL          := @perl@
PROVE         := @perl@ -I@build_dir@/lib
CAT           := @cat@
CHMOD         := @chmod@
CP            := @cp@
MKPATH        := @mkpath@
RM_F          := @rm_f@
RM_RF         := @rm_rf@
#IF(parrot_is_shared and not(cygwin or win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
PARROT        := $(BIN_DIR)/parrot@exe@
PGE           := $(PARROT) $(LIB_DIR)/library/PGE/Perl6Grammar.pir
TGE           := $(PARROT) $(LIB_DIR)/languages/tge/tgc.pir
PBC_TO_EXE    := $(BIN_DIR)/pbc_to_exe@exe@
#IF(darwin):
#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@

LIB_SRCS := \
 $(LIBPATH)/luaaux.pir \
 $(LIBPATH)/luabasic.pir \
 $(LIBPATH)/luacoroutine.pir \
 $(LIBPATH)/luapackage.pir \
 $(LIBPATH)/luaregex.pir \
 $(LIBPATH)/luastring.pir \
 $(LIBPATH)/luatable.pir \
 $(LIBPATH)/luamath.pir \
 $(LIBPATH)/luaio.pir \
 $(LIBPATH)/luafile.pir \
 $(LIBPATH)/luaos.pir \
 $(LIBPATH)/luadebug.pir \
 $(LIBPATH)/luabytecode.pir

LIB_PBCS := \
 $(LIBPATH)/luaaux.pbc \
 $(LIBPATH)/luabasic.pbc \
 $(LIBPATH)/luacoroutine.pbc \
 $(LIBPATH)/luapackage.pbc \
 $(LIBPATH)/luaregex.pbc \
 $(LIBPATH)/luastring.pbc \
 $(LIBPATH)/luatable.pbc \
 $(LIBPATH)/luamath.pbc \
 $(LIBPATH)/luaio.pbc \
 $(LIBPATH)/luafile.pbc \
 $(LIBPATH)/luaos.pbc \
 $(LIBPATH)/luadebug.pbc \
 $(LIBPATH)/luabytecode.pbc

GEN_PIR := \
 src/lua51_testlex_gen.pir \
 src/dumplex_gen.pir \
 src/lua51_gen.pir \
 src/PASTGrammar_gen.pir \
 src/POSTGrammar_gen.pir \
 $(LIBPATH)/More.pir \
#IF(has_opengl): $(LIBPATH)/gl.pir \
#IF(has_crypto): $(LIBPATH)/sha1.pir \
 $(LIBPATH)/luabytecode_gen.pir

GEN_PBC := \
 lua/lua.pbc \
 lua.pbc \
 luap.pbc \
 lua/luad.pbc

LUA_GROUP := $(PMC_DIR)/lua_group$(LOAD_EXT)

PMC_DEPS := \
 config/makefiles/pmc.in \
 $(PMC_DIR)/lua.pmc \
 $(PMC_DIR)/luaany.pmc \
 $(PMC_DIR)/luaboolean.pmc \
 $(PMC_DIR)/luabytecode.pmc \
 $(PMC_DIR)/luafunction.pmc \
 $(PMC_DIR)/luanil.pmc \
 $(PMC_DIR)/luanumber.pmc \
 $(PMC_DIR)/luastring.pmc \
 $(PMC_DIR)/luatable.pmc \
 $(PMC_DIR)/luathread.pmc \
 $(PMC_DIR)/luauserdata.pmc

SOURCES := \
  src/lua51.pir \
  src/grammar51.pir \
  src/lua51_gen.pir \
  src/PASTGrammar_gen.pir \
  src/POSTGrammar_gen.pir \
  $(LIB_SRCS)

DOCS := README

BUILD_CLEANUPS := \
  man \
  "*.pbc" \
  "lua/library/*.pbc" \
  "lua/library/Test/*.pbc" \
  "$(LIBPATH)/*.pbc" \
  $(GEN_PIR) \
  gl.lua \
  Test \
  "*.c" \
  "*$(O)" \
#IF(win32):  "parrot-*.exe" \
#IF(win32):  parrot-lua.iss \
#IF(win32):  "setup-parrot-*.exe" \
  installable_lua@exe@ \
  installable_luap@exe@

TEST_CLEANUPS := \
  "t/*.pir" \
  "t/*.lua" \
  "t/*.luac" \
  "t/*.orig_out" \
  "t/*.parrot_out"

build: build_core \
 lua/library/Test/More.pbc \
 lua/library/_helpers.pbc \
 lua/library/alarm.pbc \
 lua/library/base64.pbc \
 lua/library/bc.pbc \
 lua/library/bit.pbc \
 lua/library/bitlib.pbc \
 lua/library/complex.pbc \
#IF(has_opengl): lua/library/gl.pbc \
#IF(has_opengl): lua/library/gl_binding.pbc \
#IF(has_opengl): lua/library/glut.pbc \
 lua/library/lfs.pbc \
 lua/library/lpeg.pbc \
 lua/library/markdown.pbc \
 lua/library/mathx.pbc \
#IF(has_crypto): lua/library/md5.pbc \
 lua/library/random.pbc \
#IF(has_crypto): lua/library/sha1.pbc \
 lua/library/struct.pbc \
 lua/library/uuid.pbc \
 lua/library/zlib.pbc

build_core: \
 $(LUA_GROUP) \
 $(LIB_PBCS) \
 $(LIBPATH)/luaperl.pbc \
 $(GEN_PBC) \
 src/yapp/Lua/parser.pm

all: build installable

src/lua51_testlex_gen.pir: src/lua51_testlex.pg
	$(PGE) --output=src/lua51_testlex_gen.pir src/lua51_testlex.pg

src/dumplex_gen.pir: src/dumplex.tg
	$(TGE) --output=src/dumplex_gen.pir src/dumplex.tg

src/lua51_gen.pir: src/lua51.pg
	$(PGE) --output=src/lua51_gen.pir src/lua51.pg

src/PASTGrammar_gen.pir: src/PASTGrammar.tg
	$(TGE) --output=src/PASTGrammar_gen.pir src/PASTGrammar.tg

src/POSTGrammar_gen.pir: src/POSTGrammar.tg
	$(TGE) --output=src/POSTGrammar_gen.pir src/POSTGrammar.tg

lua/lua.pbc: $(SOURCES)
	$(PARROT) $(PARROT_ARGS) -o lua/lua.pbc src/lua51.pir

lua.pbc: lua.pir
	$(PARROT) $(PARROT_ARGS) -o lua.pbc lua.pir

lua/luad.pbc: luad.pir
	$(PARROT) -o lua/luad.pbc --output-pbc luad.pir

luap.pbc: luap.pir
	$(PARROT) -o luap.pbc --output-pbc luap.pir

$(LUA_GROUP): $(PMC_DEPS)
	$(MAKE) $(PMC_DIR)

$(LIBPATH)/luaperl.pbc: $(LIBPATH)/luaperl.pir
	-$(PARROT) --output=$(LIBPATH)/luaperl.pbc $(LIBPATH)/luaperl.pir

$(LIBPATH)/luaaux.pbc: $(LIBPATH)/luaaux.pir
	-$(PARROT) --output=$(LIBPATH)/luaaux.pbc $(LIBPATH)/luaaux.pir

$(LIBPATH)/luabasic.pbc: $(LIBPATH)/luabasic.pir
	-$(PARROT) --output=$(LIBPATH)/luabasic.pbc $(LIBPATH)/luabasic.pir

$(LIBPATH)/luacoroutine.pbc: $(LIBPATH)/luacoroutine.pir
	-$(PARROT) --output=$(LIBPATH)/luacoroutine.pbc $(LIBPATH)/luacoroutine.pir

$(LIBPATH)/luapackage.pbc: $(LIBPATH)/luapackage.pir
	-$(PARROT) --output=$(LIBPATH)/luapackage.pbc $(LIBPATH)/luapackage.pir

$(LIBPATH)/luaregex.pbc: $(LIBPATH)/luaregex.pir
	-$(PARROT) --output=$(LIBPATH)/luaregex.pbc $(LIBPATH)/luaregex.pir

$(LIBPATH)/luastring.pbc: $(LIBPATH)/luastring.pir
	-$(PARROT) --output=$(LIBPATH)/luastring.pbc $(LIBPATH)/luastring.pir

$(LIBPATH)/luatable.pbc: $(LIBPATH)/luatable.pir
	-$(PARROT) --output=$(LIBPATH)/luatable.pbc $(LIBPATH)/luatable.pir

$(LIBPATH)/luamath.pbc: $(LIBPATH)/luamath.pir
	-$(PARROT) --output=$(LIBPATH)/luamath.pbc $(LIBPATH)/luamath.pir

$(LIBPATH)/luaio.pbc: $(LIBPATH)/luaio.pir
	-$(PARROT) --output=$(LIBPATH)/luaio.pbc $(LIBPATH)/luaio.pir

$(LIBPATH)/luafile.pbc: $(LIBPATH)/luafile.pir
	-$(PARROT) --output=$(LIBPATH)/luafile.pbc $(LIBPATH)/luafile.pir

$(LIBPATH)/luaos.pbc: $(LIBPATH)/luaos.pir
	-$(PARROT) --output=$(LIBPATH)/luaos.pbc $(LIBPATH)/luaos.pir

$(LIBPATH)/luadebug.pbc: $(LIBPATH)/luadebug.pir
	-$(PARROT) --output=$(LIBPATH)/luadebug.pbc $(LIBPATH)/luadebug.pir

$(LIBPATH)/luabytecode.pbc: $(LIBPATH)/luabytecode.pir $(LIBPATH)/luabytecode_gen.pir
	-$(PARROT) --output=$(LIBPATH)/luabytecode.pbc $(LIBPATH)/luabytecode.pir

$(LIBPATH)/luabytecode_gen.pir: $(LIBPATH)/luabytecode.rules src/build/translator.pl
	$(PERL) src/build/translator.pl $(LIBPATH)/luabytecode.rules \
            --output $(LIBPATH)/luabytecode_gen.pir

$(LIBPATH)/More.pir: t/lua-TestMore/src/Test/More.lua
	-$(MKPATH) Test
	-$(CP) t/lua-TestMore/src/Test/More.lua Test/More.lua
	-$(PARROT) luap.pir --target=pir Test/More.lua > $(LIBPATH)/More.pir

lua/library/Test/More.pbc: $(LIBPATH)/More.pir
	-$(PARROT) --output=lua/library/Test/More.pbc $(LIBPATH)/More.pir

lua/library/_helpers.pbc: $(LIBPATH)/_helpers.pir
	$(PARROT) --output=lua/library/_helpers.pbc $(LIBPATH)/_helpers.pir

lua/library/alarm.pbc: $(LIBPATH)/alarm.pir
	-$(PARROT) --output=lua/library/alarm.pbc $(LIBPATH)/alarm.pir

lua/library/base64.pbc: $(LIBPATH)/base64.pir
	-$(PARROT) --output=lua/library/base64.pbc $(LIBPATH)/base64.pir

lua/library/bc.pbc: $(LIBPATH)/bc.pir
	-$(PARROT) --output=lua/library/bc.pbc $(LIBPATH)/bc.pir

lua/library/bit.pbc: $(LIBPATH)/bit.pir
	-$(PARROT) --output=lua/library/bit.pbc $(LIBPATH)/bit.pir

lua/library/bitlib.pbc: $(LIBPATH)/bitlib.pir
	-$(PARROT) --output=lua/library/bitlib.pbc $(LIBPATH)/bitlib.pir

lua/library/complex.pbc: $(LIBPATH)/complex.pir
	-$(PARROT) --output=lua/library/complex.pbc $(LIBPATH)/complex.pir

#IF(has_opengl):$(LIBPATH)/gl.pir: $(LIBPATH)/gl.lua
#IF(has_opengl):	-$(CP) $(LIBPATH)/gl.lua gl.lua
#IF(has_opengl):	-$(PARROT) luap.pir --target=pir gl.lua > $(LIBPATH)/gl.pir
#IF(has_opengl):
#IF(has_opengl):lua/library/gl.pbc: $(LIBPATH)/gl.pir
#IF(has_opengl):	-$(PARROT) --output=lua/library/gl.pbc $(LIBPATH)/gl.pir
#IF(has_opengl):
#IF(has_opengl):lua/library/gl_binding.pbc: $(LIBPATH)/gl_binding.pir
#IF(has_opengl):	-$(PARROT) --output=lua/library/gl_binding.pbc $(LIBPATH)/gl_binding.pir
#IF(has_opengl):
#IF(has_opengl):lua/library/glut.pbc: $(LIBPATH)/glut.pir
#IF(has_opengl):	-$(PARROT) --output=lua/library/glut.pbc $(LIBPATH)/glut.pir

lua/library/lfs.pbc: $(LIBPATH)/lfs.pir
	-$(PARROT) --output=lua/library/lfs.pbc $(LIBPATH)/lfs.pir

lua/library/lpeg.pbc: $(LIBPATH)/lpeg.pir
	-$(PARROT) --output=lua/library/lpeg.pbc $(LIBPATH)/lpeg.pir

lua/library/markdown.pbc: $(LIBPATH)/markdown.pir
	-$(PARROT) --output=lua/library/markdown.pbc $(LIBPATH)/markdown.pir

lua/library/mathx.pbc: $(LIBPATH)/mathx.pir
	-$(PARROT) --output=lua/library/mathx.pbc $(LIBPATH)/mathx.pir

#IF(has_crypto):lua/library/md5.pbc: $(LIBPATH)/md5.pir
#IF(has_crypto):	-$(PARROT) --output=lua/library/md5.pbc $(LIBPATH)/md5.pir

lua/library/random.pbc: $(LIBPATH)/random.pir
	-$(PARROT) --output=lua/library/random.pbc $(LIBPATH)/random.pir

#IF(has_crypto):lua/library/sha1.pbc: $(LIBPATH)/md5.pir
#IF(has_crypto):	$(PERL) -pe "s|md5|sha1|g; s|MD5|SHA1|g" $(LIBPATH)/md5.pir > $(LIBPATH)/sha1.pir
#IF(has_crypto):	-$(PARROT) --output=lua/library/sha1.pbc $(LIBPATH)/sha1.pir

lua/library/struct.pbc: $(LIBPATH)/struct.pir
	-$(PARROT) --output=lua/library/struct.pbc $(LIBPATH)/struct.pir

lua/library/uuid.pbc: $(LIBPATH)/uuid.pir
	-$(PARROT) --output=lua/library/uuid.pbc $(LIBPATH)/uuid.pir

lua/library/zlib.pbc: $(LIBPATH)/zlib.pir
	-$(PARROT) --output=lua/library/zlib.pbc $(LIBPATH)/zlib.pir

src/yapp/Lua/parser.pm: src/yapp/Lua/lua51.yp
	yapp -v -m Lua::parser -o src/yapp/Lua/parser.pm src/yapp/Lua/lua51.yp

installable: installable_lua@exe@  installable_luap@exe@

installable_lua@exe@: lua.pbc
	$(PBC_TO_EXE) lua.pbc --install

installable_luap@exe@: luap.pbc
	$(PBC_TO_EXE) luap.pbc --install

Makefile: config/makefiles/root.in
	$(PERL) Configure.pl

help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "  build:             lua.pbc"
	@echo "                     This is the default."
	@echo "  all:               lua.pbc installable"
	@echo "  installable:       Create libs and self-hosting binaries to be installed."
	@echo "  install:           Install the installable targets and docs."
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run the test suite."
	@echo "  codetest:          Run file metadata and coding standards tests."
	@echo "  testclean:         Clean up test results."
	@echo ""
	@echo "Smoke Testing:"
	@echo "  smoke:             Run the test suite and send report to the smolder server"
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleaning up."
	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
	@echo "  distclean:         Removes also anything built, in theory"
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""

test: build
	$(PERL) -I$(LIB_DIR)/tools/lib t/harness

export LUA_PATH=;;../src/?.lua
export LUA_INIT=platform = { osname=[[@osname@]], intsize=@intsize@, longsize=@longsize@ }

spectest : build
#UNLESS(win32):	which parrot-lua
	cd t && cd lua-TestMore && cd test_lua51 \
	 && prove --exec=parrot-lua *.t lib//*.t

upload_pl = \
use strict; \
use warnings; \
use LWP::UserAgent; \
my $$lua_version = qx{parrot-lua -e "print(_VERSION)"}; \
my $$ua = LWP::UserAgent->new(); \
$$ua->env_proxy(); \
my $$server = q{http:////smolder.plusthree.com}; \
my $$project_id = 12; \
my $$url = $$server . q{//app//developer_projects//process_add_report//} . $$project_id; \
my $$response = $$ua->post( \
    $$url, \
    Content_Type => q{form-data}, \
    Content      => [ \
        architecture => q{@archname@}, \
        platform     => q{@osname@}, \
        tags         => qq{@osname@, @archname@, parrot-lua, $$lua_version}, \
        comments     => q{parrot-lua}, \
        username     => q{parrot-autobot}, \
        password     => q{squ@wk}, \
        project_id   => $$project_id, \
        report_file  => [q{t//lua-TestMore//test_lua51//test_lua51.tar.gz}], \
        revision     => @revision@, \
        ] \
); \
if ($$response->code == 302) { \
    my ($$report_id) = $$response->content =~ //Reported .(\d+) added//i; \
    my $$report_url = $$server . q{//app//public_projects//report_details//} . $$report_id; \
    my $$project_url = $$server . q{//app//public_projects//smoke_reports//} . $$project_id; \
    print qq{Test report successfully sent to Smolder at\n$$report_url} \
      . qq{\nYou can see other recent reports at\n$$project_url .\n\n}; \
} \
else { \
    die qq{Could not upload report to Smolder at $$server} \
      . qq{\nHTTP CODE: } . $$response->code . q{ (} \
      . $$response->message . qq{)\n}; \
}

smoke : build
#UNLESS(win32):	which parrot-lua
	-cd t && cd lua-TestMore && cd test_lua51 \
	 && prove --archive=test_lua51.tar.gz --exec=parrot-lua *.t
	@perl -e '$(upload_pl)'

codetest: codetest-c codetest-make codetest-perl codetest-pir codetest-pod

T_C     = src//pmc//*.pmc src//pmc//lua_private.h
T_MAKE  = config//makefiles//root.in config//makefiles//pmc.in
T_PERL  = Configure.pl t//harness t//*.t t//Parrot//Test//*.pm \
          src//build//*.pl src//yapp//Lua//*.pm
T_PIR   = *.pir src//lua51.pir src//grammar51.pir src//lib//*.pir t//pmc//*.t
T_POD   = doc//*.pod

codetest-c:
	- $(PROVE) @build_dir@/t/codingstd/c_code_coda.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_cppcomments.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_indent.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_macro_args.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_operator.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_parens.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_returns.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/cuddled_else.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/filenames.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/tabs.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/pod_syntax.t $(T_C)

codetest-make:
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_MAKE)
	- $(PROVE) @build_dir@/t/codingstd/filenames.t $(T_MAKE)
	- $(PROVE) @build_dir@/t/codingstd/make_code_coda.t $(T_MAKE)
	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_MAKE)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_MAKE)

codetest-perl: clean
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/cuddled_else.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/filenames.t $(T_PERL)
#	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/perlcritic.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/pod_syntax.t $(T_PERL)

codetest-pir: clean
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/filenames.t $(T_PIR)
#	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/pir_code_coda.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/tabs.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/pod_syntax.t $(T_PIR)

codetest-pod:
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_POD)
	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_POD)
	- $(PROVE) @build_dir@/t/codingstd/tabs.t $(T_POD)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_POD)
	- $(PROVE) @build_dir@/t/codingstd/pod_syntax.t $(T_POD)

test-installable: installable
	./installable_lua@exe@ -e "print 'ok'"

install: installable
	$(MAKE) $(PMC_DIR) install
	$(CP) installable_lua@exe@ $(BIN_DIR)/parrot-lua@exe@
	$(CHMOD) 0755 $(BIN_DIR)/parrot-lua@exe@
	$(CP) installable_luap@exe@ $(BIN_DIR)/parrot-luap@exe@
	$(CHMOD) 0755 $(BIN_DIR)/parrot-luap@exe@
	-$(MKPATH) $(LIB_DIR)/languages/lua
	$(CP) lua/*.pbc $(LIB_DIR)/languages/lua
	-$(MKPATH) $(LIB_DIR)/languages/lua/library
	$(CP) lua/library/*.pbc $(LIB_DIR)/languages/lua/library
	-$(MKPATH) $(LIB_DIR)/languages/lua/library/Test
	$(CP) lua/library/Test/*.pbc $(LIB_DIR)/languages/lua/library/Test
	-$(MKPATH) $(MANDIR)/man1
	pod2man lua.pir > $(MANDIR)/man1/parrot-lua.1
	pod2man luap.pir > $(MANDIR)/man1/parrot-luap.1
	-$(MKPATH) $(DOC_DIR)/languages/lua
	$(CP) $(DOCS) $(DOC_DIR)/languages/lua
	$(CP) doc/*.pod $(DOC_DIR)/languages/lua

uninstall:
	$(MAKE) $(PMC_DIR) uninstall
	$(RM_F) $(BIN_DIR)/parrot-lua@exe@
	$(RM_F) $(BIN_DIR)/parrot-luap@exe@
	$(RM_RF) $(LIB_DIR)/languages/lua
	$(RM_F) $(MANDIR)/man1/parrot-lua.1
	$(RM_RF) $(DOC_DIR)/languages/lua

win32-inno-installer: installable
	-$(MKPATH) man/man1
	pod2man lua.pir > man/man1/parrot-lua.1
	pod2man luap.pir > man/man1/parrot-luap.1
	-$(MKPATH) man/html
	pod2html --infile lua.pir --outfile man/html/parrot-lua.html
	pod2html --infile luap.pir --outfile man/html/parrot-luap.html
	$(CP) installable_lua@exe@ parrot-lua@exe@
	$(CP) installable_luap@exe@ parrot-luap@exe@
	$(PERL) -I$(LIB_DIR)/tools/lib $(LIB_DIR)/tools/dev/mk_inno_language.pl lua
	iscc parrot-lua.iss

testclean:
	$(RM_F) $(TEST_CLEANUPS)

clean:
	$(MAKE) $(PMC_DIR) clean
	$(RM_RF) $(TEST_CLEANUPS) $(BUILD_CLEANUPS)

realclean:
	$(MAKE) $(PMC_DIR) realclean
	$(RM_RF) $(TEST_CLEANUPS) $(BUILD_CLEANUPS) Makefile

distclean: realclean

# Local variables:
#   mode: makefile
# End:
# vim: ft=make:


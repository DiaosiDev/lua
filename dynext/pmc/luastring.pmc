/*
Copyright (C) 2005-2009, Parrot Foundation.
$Id$

=head1 Lua String

=head2 Description

C<LuaString> extends C<LuaAny> to provide a class with the behaviour of
the Lua C<String> type.

=head3 Overloaded Methods

=over 4

=cut

*/

#include "lua_private.h"

PMC *
_LuaString_get_metatable(PARROT_INTERP) {
    PMC * const hll_ns = Parrot_get_ctx_HLL_namespace(interp);
    PMC * const ns = Parrot_ns_get_namespace_keyed_str(interp,
            hll_ns, Parrot_str_new_constant(interp, "string"));
    return Parrot_ns_find_namespace_global(interp,
            ns, Parrot_str_new_constant(interp, "mt_string"));
}


pmclass LuaString
    extends  LuaAny
    provides scalar
    provides string
    auto_attrs
    dynpmc
    group    lua_group
    hll      lua
    maps     String {

    ATTR STRING * str_val;

/*

=item C<void init()>

Initializes the string.

=cut

*/
    VTABLE void init() {
        STRING *str_val = Parrot_str_new_noinit(INTERP, 0);
        SET_ATTR_str_val(INTERP, SELF, str_val);
        PObj_custom_mark_SET(SELF);
    }

/*

=item C<void mark()>

Marks the string as live.

=cut

*/
    VTABLE void mark() {
        STRING * str_val;
        GET_ATTR_str_val(INTERP, SELF, str_val);
        Parrot_gc_mark_STRING_alive(INTERP, str_val);
    }

/*

=item C<PMC* clone()>

Creates a copy of the string.

=cut

*/
    VTABLE PMC* clone() {
        PMC * const res = Parrot_pmc_new(INTERP, PMC_type(SELF));
        VTABLE_set_string_native(INTERP, res, SELF.get_string());
        return res;
    }

/*

=item C<FLOATVAL get_number()>

Returns a number or throws an exception.

=cut

*/
    VTABLE FLOATVAL get_number() {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber)
            return VTABLE_get_number(INTERP, n);

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
                "attempt to perform arithmetic on a %Ss value", SELF.name());
        return 0.0;
    }

/*

=item C<STRING* get_string()>

Returns the string itself.

=cut

*/
    VTABLE STRING* get_string() {
        STRING *str_val;
        GET_ATTR_str_val(INTERP, SELF, str_val);
        return str_val;
    }

/*

=item C<STRING* name()>

Return the string "string".

=cut

*/
    VTABLE STRING* name() {
        return Parrot_str_new_constant(INTERP, "string");
    }

/*

=item C<void set_integer_native(INTVAL value)>

=cut

*/
    VTABLE void set_integer_native(INTVAL value) {
        Parrot_pmc_reuse(INTERP, SELF, dynpmc_LuaNumber, 0);
        SELF.set_integer_native(value);
    }

/*

=item C<void set_number_native(FLOATVAL value)>

=cut

*/
    VTABLE void set_number_native(FLOATVAL value) {
        Parrot_pmc_reuse(INTERP, SELF, dynpmc_LuaNumber, 0);
        SELF.set_number_native(value);
    }

/*

=item C<VOID set_string_native(STRING *value)>

Sets the value of the string to that of the specified C<string>.

=cut

*/
    VTABLE void set_string_native(STRING *value) {
        /* Only allow constant PMCs to embed constant strings */
        if (PObj_constant_TEST(SELF) && !PObj_constant_TEST(value)) {
            const char *copy = Parrot_str_to_cstring(INTERP, value);
            value            = Parrot_str_new_constant(INTERP, copy);
        }

        SET_ATTR_str_val(INTERP, SELF, value);
    }

/*

=item C<VOID set_pmc(PMC *value)>

Sets the value of the string to the string value of
the specified C<PMC>.

=cut

*/
    VTABLE void set_pmc(PMC *value) {
        SET_ATTR_str_val(INTERP, SELF, VTABLE_get_string(INTERP, value));
    }

/*

=item C<PMC* neg(PMC *dest)>

=cut

*/
    VTABLE PMC* neg(PMC *dest) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber) {
            const FLOATVAL v = - VTABLE_get_number(INTERP, n);
            dest = Parrot_pmc_new(INTERP, dynpmc_LuaNumber);
            VTABLE_set_number_native(INTERP, dest, v);
            return dest;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value", SELF.name());
    }

/*

=item C<void i_neg()>

=cut

*/
    VTABLE void i_neg() {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber) {
            const FLOATVAL v = - VTABLE_get_number(INTERP, n);
            VTABLE_set_number_native(INTERP, n, v);
        }
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
                "attempt to perform arithmetic on a %Ss value", SELF.name());
    }

/*

=item C<INTVAL elements()>

Return length of the string.

=cut

*/
    VTABLE INTVAL elements() {
        return Parrot_str_byte_length(INTERP, SELF.get_string());
    }

/*

=item C<void freeze(PMC *info)>

Used to archive the string.

=cut

*/
    VTABLE void freeze(PMC *info) {
        SUPER(info);
        VTABLE_push_string(INTERP, info, SELF.get_string());
    }

/*

=item C<void thaw(PMC *info)>

Used to unarchive the string.

=cut

*/
    VTABLE void thaw(PMC *info) {
        SUPER(info);
        SET_ATTR_str_val(INTERP, SELF, VTABLE_shift_string(INTERP, info));
    }

/*

=back

=head3 non-Vtable Methods

=over 4

=item C<PMC* add(PMC *value, PMC *dest)>

=cut

*/
    MULTI PMC* add(LuaNumber value, PMC *dest) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber) {
            PMC *result = PMCNULL;
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "add", "PPP->P", n, value, dest, &result);
            return result;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value", SELF.name());
    }

    MULTI PMC* add(LuaString value, PMC *dest) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber) {
            PMC *result = PMCNULL;
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "add", "PPP->P", n, value, dest, &result);
            return result;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value", SELF.name());
    }

    MULTI PMC* add(DEFAULT value, PMC *dest) {
        PMC * const meth = _LuaAny_find_meth(INTERP, value, "__add");
        if (!PMC_IS_NULL(meth)) {
            Parrot_ext_call(INTERP, meth, "PiP->P", SELF, value, &dest);
            if (PMC_IS_NULL(dest))
                dest = Parrot_pmc_new(INTERP, dynpmc_LuaNil);

            return dest;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value",
                VTABLE_name(INTERP, value));
    }

/*

=item C<void i_add(PMC *value)>

=cut

*/
    MULTI void i_add(LuaNumber value) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber)
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "i_add", "PP", n, value);
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
                "attempt to perform arithmetic on a %Ss value",
                    SELF.name());
    }

    MULTI void i_add(LuaString value) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber)
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "i_add", "PP", n, value);
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
                "attempt to perform arithmetic on a %Ss value",
                    SELF.name());
    }

    MULTI void i_add(DEFAULT value) {
        PMC * const meth = _LuaAny_find_meth(INTERP, value, "__add");
        if (!PMC_IS_NULL(meth)) {
            Parrot_ext_call(INTERP, meth, "PiP->P", SELF, value, &SELF);
            if (PMC_IS_NULL(SELF))
                SELF = Parrot_pmc_new(INTERP, dynpmc_LuaNil);

            return;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value",
                VTABLE_name(INTERP, value));
    }

/*

=item C<PMC* subtract(PMC *value, PMC *dest)>

=cut

*/
    MULTI PMC* subtract(LuaNumber value, PMC *dest) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber) {
            PMC *result = PMCNULL;
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "subtract", "PPP->P", n, value, dest, &result);
            return result;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value", SELF.name());
    }

    MULTI PMC* subtract(LuaString value, PMC *dest) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber) {
            PMC *result = PMCNULL;
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "subtract", "PPP->P", n, value, dest, &result);
            return result;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value", SELF.name());
    }

    MULTI PMC* subtract(DEFAULT value, PMC *dest) {
        PMC * const meth = _LuaAny_find_meth(INTERP, value, "__sub");
        if (!PMC_IS_NULL(meth)) {
            Parrot_ext_call(INTERP, meth, "PiP->P", SELF, value, &dest);
            if (PMC_IS_NULL(dest))
                dest = Parrot_pmc_new(INTERP, dynpmc_LuaNil);

            return dest;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value",
                VTABLE_name(INTERP, value));
    }

/*

=item C<void i_subtract(PMC *value)>

=cut

*/
    MULTI void i_subtract(LuaNumber value) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber)
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "i_subtract", "PP", n, value);
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
                "attempt to perform arithmetic on a %Ss value",
                    SELF.name());
    }

    MULTI void i_subtract(LuaString value) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber)
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "i_subtract", "PP", n, value);
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
                "attempt to perform arithmetic on a %Ss value",
                    SELF.name());
    }

    MULTI void i_subtract(DEFAULT value) {
        PMC * const meth = _LuaAny_find_meth(INTERP, value, "__sub");

        if (!PMC_IS_NULL(meth)) {
            Parrot_ext_call(INTERP, meth, "PiP->P", SELF, value, &SELF);
            if (PMC_IS_NULL(SELF))
                SELF = Parrot_pmc_new(INTERP, dynpmc_LuaNil);

            return;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value",
                VTABLE_name(INTERP, value));
    }

/*

=item C<PMC* multiply(PMC *value, PMC *dest)>

=cut

*/
    MULTI PMC* multiply(LuaNumber value, PMC *dest) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber) {
            PMC *result = PMCNULL;
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "multiply", "PPP->P", n, value, dest, &result);
            return result;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value", SELF.name());
    }

    MULTI PMC* multiply(LuaString value, PMC *dest) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber) {
            PMC *result = PMCNULL;
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "multiply", "PPP->P", n, value, dest, &result);
            return result;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value", SELF.name());
    }

    MULTI PMC* multiply(DEFAULT value, PMC *dest) {
        PMC * const meth = _LuaAny_find_meth(INTERP, value, "__mul");
        if (!PMC_IS_NULL(meth)) {
            Parrot_ext_call(INTERP, meth, "PiP->P", SELF, value, &dest);
            if (PMC_IS_NULL(dest))
                dest = Parrot_pmc_new(INTERP, dynpmc_LuaNil);

            return dest;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value",
                VTABLE_name(INTERP, value));
    }

/*

=item C<void i_multiply(PMC *value)>

=cut

*/
    MULTI void i_multiply(LuaNumber value) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber)
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "i_multiply", "PP", n, value);
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
                "attempt to perform arithmetic on a %Ss value",
                    SELF.name());
    }

    MULTI void i_multiply(LuaString value) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber)
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "i_multiply", "PP", n, value);
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
                "attempt to perform arithmetic on a %Ss value",
                    SELF.name());
    }

    MULTI void i_multiply(DEFAULT value) {
        PMC * const meth = _LuaAny_find_meth(INTERP, value, "__mul");
        if (!PMC_IS_NULL(meth)) {
            Parrot_ext_call(INTERP, meth, "PiP->P", SELF, value, &SELF);
            if (PMC_IS_NULL(SELF))
                SELF = Parrot_pmc_new(INTERP, dynpmc_LuaNil);

            return;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value",
                VTABLE_name(INTERP, value));
    }

/*

=item C<PMC* divide(PMC *value, PMC *dest)>

=cut

*/
    MULTI PMC* divide(LuaNumber value, PMC *dest) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber) {
            PMC *result = PMCNULL;
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "divide", "PPP->P", n, value, dest, &result);
            return result;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value", SELF.name());
    }

    MULTI PMC* divide(LuaString value, PMC *dest) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber) {
            PMC *result = PMCNULL;
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "divide", "PPP->P", n, value, dest, &result);
            return result;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value", SELF.name());
    }

    MULTI PMC* divide(DEFAULT value, PMC *dest) {
        PMC * const meth = _LuaAny_find_meth(INTERP, value, "__div");

        if (!PMC_IS_NULL(meth)) {
            Parrot_ext_call(INTERP, meth, "PiP->P", SELF, value, &dest);
            if (PMC_IS_NULL(dest))
                dest = Parrot_pmc_new(INTERP, dynpmc_LuaNil);

            return dest;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value",
                VTABLE_name(INTERP, value));
    }

/*

=item C<void i_divide(PMC *value)>

=cut

*/
    MULTI void i_divide(LuaNumber value) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber)
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "i_divide", "PP", n, value);
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
                "attempt to perform arithmetic on a %Ss value",
                    SELF.name());
    }

    MULTI void i_divide(LuaString value) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber)
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "i_divide", "PP", n, value);
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
                "attempt to perform arithmetic on a %Ss value",
                    SELF.name());
    }

    MULTI void i_divide(DEFAULT value) {
        PMC * const meth = _LuaAny_find_meth(INTERP, value, "__div");
        if (!PMC_IS_NULL(meth)) {
            Parrot_ext_call(INTERP, meth, "PiP->P", SELF, value, &SELF);
            if (PMC_IS_NULL(SELF))
                SELF = Parrot_pmc_new(INTERP, dynpmc_LuaNil);

            return;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value",
                VTABLE_name(INTERP, value));
    }

/*

=item C<PMC* modulus(PMC *value, PMC *dest)>

=cut

*/
    MULTI PMC* modulus(LuaNumber value, PMC *dest) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber) {
            PMC *result = PMCNULL;
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "modulus", "PPP->P", n, value, dest, &result);
            return result;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value", SELF.name());
    }

    MULTI PMC* modulus(LuaString value, PMC *dest) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber) {
            PMC *result = PMCNULL;
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "modulus", "PPP->P", n, value, dest, &result);
            return result;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value", SELF.name());
    }

    MULTI PMC* modulus(DEFAULT value, PMC *dest) {
        PMC * const meth = _LuaAny_find_meth(INTERP, value, "__mod");

        if (!PMC_IS_NULL(meth)) {
            Parrot_ext_call(INTERP, meth, "PiP->P", SELF, value, &dest);
            if (PMC_IS_NULL(dest))
                dest = Parrot_pmc_new(INTERP, dynpmc_LuaNil);

            return dest;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value",
                VTABLE_name(INTERP, value));
    }

/*

=item C<void i_modulus(PMC *value)>

=cut

*/
    MULTI void i_modulus(LuaNumber value) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber)
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "i_modulus", "PP", n, value);
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
                "attempt to perform arithmetic on a %Ss value",
                    SELF.name());
    }

    MULTI void i_modulus(LuaString value) {
        PMC *n;
        Parrot_pcc_invoke_method_from_c_args(INTERP, SELF,
            Parrot_str_new_constant(INTERP, "tonumber"), "->P", &n);

        if (PMC_type(n) == dynpmc_LuaNumber)
            Parrot_mmd_multi_dispatch_from_c_args(INTERP,
                "i_modulus", "PP", n, value);
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
                "attempt to perform arithmetic on a %Ss value",
                    SELF.name());
    }

    MULTI void i_modulus(DEFAULT value) {
        PMC * const meth = _LuaAny_find_meth(INTERP, value, "__mod");
        if (!PMC_IS_NULL(meth)) {
            Parrot_ext_call(INTERP, meth, "PiP->P", SELF, value, &SELF);
            if (PMC_IS_NULL(SELF))
                SELF = Parrot_pmc_new(INTERP, dynpmc_LuaNil);

            return;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to perform arithmetic on a %Ss value",
                VTABLE_name(INTERP, value));
    }

/*

=item C<INTVAL is_equal(PMC *value)>

Compares the string with C<value>; returns true if
they match.

=cut

*/
    MULTI INTVAL is_equal(LuaString value) {
        STRING * const s = SELF.get_string();
        STRING * const v = VTABLE_get_string(INTERP, value);
        return Parrot_str_equal(INTERP, s, v);
    }

    MULTI INTVAL is_equal(DEFAULT value) {
        return (INTVAL)0;
    }

/*

=item C<INTVAL cmp(PMC *value)>

Compares the string with C<value>; returns -1 if the
string is smaller, 0 if they are equal, and 1 if C<value>
is smaller.

Throws an exception unless C<value> is a LuaString.

=cut

*/
    MULTI INTVAL cmp(LuaString value) {
        STRING * const s = SELF.get_string();
        STRING * const v = VTABLE_get_string(INTERP, value);
        return Parrot_str_compare(INTERP, s, v);
    }

    MULTI INTVAL cmp(DEFAULT value) {
        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to compare string with %Ss",
                VTABLE_name(INTERP, value));
    }

/*

=item C<PMC* concatenate(PMC *value, PMC *dest)>

=cut

*/
    MULTI PMC* concatenate(LuaNumber value, PMC *dest) {
        STRING * const s = Parrot_str_concat(INTERP,
            SELF.get_string(), VTABLE_get_string(INTERP, value));

        dest = Parrot_pmc_new(INTERP, dynpmc_LuaString);
        VTABLE_set_string_native(INTERP, dest, s);
        return dest;
    }

    MULTI PMC* concatenate(LuaString value, PMC *dest) {
        STRING * const s = Parrot_str_concat(INTERP,
            SELF.get_string(), VTABLE_get_string(INTERP, value));

        dest = Parrot_pmc_new(INTERP, dynpmc_LuaString);
        VTABLE_set_string_native(INTERP, dest, s);
        return dest;
    }

    MULTI PMC* concatenate(DEFAULT value, PMC *dest) {
        PMC * const meth = _LuaAny_find_meth(INTERP, value, "__concat");

        if (!PMC_IS_NULL(meth)) {
            Parrot_ext_call(INTERP, meth, "PiP->P", SELF, value, &dest);
            if (PMC_IS_NULL(dest))
                dest = Parrot_pmc_new(INTERP, dynpmc_LuaNil);

            return dest;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to concatenate a %Ss value",
                VTABLE_name(INTERP, value));
    }

/*

=item C<void i_concatenate(PMC *value)>

=cut

*/
    MULTI void i_concatenate(LuaNumber value) {
        STRING * const s = SELF.get_string();
        STRING * const v = VTABLE_get_string(INTERP, value);
        SELF.set_string_native(Parrot_str_concat(INTERP, s, v));
    }

    MULTI void i_concatenate(LuaString value) {
        STRING * const s = SELF.get_string();
        STRING * const v = VTABLE_get_string(INTERP, value);
        SELF.set_string_native(Parrot_str_concat(INTERP, s, v));
    }

    MULTI void i_concatenate(DEFAULT value) {
        PMC * const meth = _LuaAny_find_meth(INTERP, value, "__concat");

        if (!PMC_IS_NULL(meth)) {
            Parrot_ext_call(INTERP, meth, "PiP->P", SELF, value, &SELF);
            if (PMC_IS_NULL(SELF))
                SELF = Parrot_pmc_new(INTERP, dynpmc_LuaNil);

            return;
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_ILL_INHERIT,
            "attempt to concatenate a %Ss value",
                VTABLE_name(INTERP, value));
    }

/*

=back

=head3 Specific Methods

=over 4

=item C<PMC *get_metatable()>

=cut

*/
    METHOD PMC* get_metatable() {
        PMC *retval = _LuaString_get_metatable(INTERP);

        if (PMC_IS_NULL(retval))
            retval = Parrot_pmc_new(INTERP, dynpmc_LuaNil);

        RETURN(PMC *retval);
    }

/*

=item C<PMC* len()>


=cut

*/
    METHOD PMC* len() {
        PMC * const retval = Parrot_pmc_new(INTERP, dynpmc_LuaNumber);
        VTABLE_set_number_native(INTERP, retval, SELF.elements());
        RETURN(PMC *retval);
    }

/*

=item C<PMC* rawequal(PMC *value)>

=cut

*/
    METHOD PMC* rawequal(PMC *value) {
        PMC *retval = Parrot_pmc_new(INTERP, dynpmc_LuaBoolean);

        if (PMC_type(SELF) == PMC_type(value)
        && 0               == Parrot_str_not_equal(INTERP, SELF.get_string(),
                                  VTABLE_get_string(INTERP, value)))
            VTABLE_set_bool(INTERP, retval, 1);
        else
            VTABLE_set_bool(INTERP, retval, 0);

        RETURN(PMC *retval);
    }

/*

=item C<PMC* tonumber()>

=cut

*/
    METHOD PMC* tonumber() {
        PMC *retval;
        char * const s1 = Parrot_str_to_cstring(INTERP, SELF.get_string());
        char *s2;
        const FLOATVAL d = strtod(s1, &s2);

        /* at least one valid digit? */
        if (s1 != s2) {
            /* skip trailing spaces */
            while (isspace((unsigned char)(*s2)))
                s2++;

            /* no invalid trailing characters? */
            if (*s2 == '\0') {
                retval = Parrot_pmc_new(INTERP, dynpmc_LuaNumber);
                VTABLE_set_number_native(INTERP, retval, d);
                Parrot_str_free_cstring(s1);
                RETURN(PMC *retval);
            }
        }
        retval = Parrot_pmc_new(INTERP, dynpmc_LuaNil);
        Parrot_str_free_cstring(s1);
        RETURN(PMC *retval);
    }

/*

=item C<PMC* tobase(INTVAL base)>

=cut

*/
    METHOD PMC* tobase(INTVAL base) {
        PMC *retval;
        char * const s1 = Parrot_str_to_cstring(INTERP, SELF.get_string());
        char *s2;
        const unsigned long n = strtoul(s1, &s2, base);

        /* at least one valid digit? */
        if (s1 != s2) {

            /* skip trailing spaces */
            while (isspace((unsigned char)(*s2)))
                s2++;

            /* no invalid trailing characters? */
            if (*s2 == '\0') {
                retval = Parrot_pmc_new(INTERP, dynpmc_LuaNumber);
                VTABLE_set_number_native(INTERP, retval, n);
                Parrot_str_free_cstring(s1);
                RETURN(PMC *retval);
            }
        }
        retval = Parrot_pmc_new(INTERP, dynpmc_LuaNil);
        Parrot_str_free_cstring(s1);
        RETURN(PMC *retval);
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */

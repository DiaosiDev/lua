# Copyright (C) 2005-2009, Parrot Foundation.
# $Id$

## arguments we want to run parrot with
PARROT_ARGS   :=

## configuration settings
VERSION       := @versiondir@
BIN_DIR       := @bindir@
LIB_DIR       := @libdir@$(VERSION)
DOC_DIR       := @docdir@$(VERSION)
MANDIR        := @mandir@$(VERSION)

# Set up extensions
LOAD_EXT      := @load_ext@
O             := @o@

# Various paths
PMC_DIR       := dynext/pmc
LUALIB_DIR    := lua/library
LIBPATH       := lua/lib

## Setup some commands
MAKE          := @make_c@
PERL          := @perl@
PROVE         := @perl@ -I@build_dir@/lib
CAT           := @cat@
CHMOD         := @chmod@
CP            := @cp@
MKPATH        := @mkpath@
RM_F          := @rm_f@
RM_RF         := @rm_rf@
PARROT        := $(BIN_DIR)/parrot@exe@
PGE           := $(PARROT) $(LIB_DIR)/library/PGE/Perl6Grammar.pir
TGE           := $(PARROT) $(LIB_DIR)/languages/tge/tgc.pir
PBC_TO_EXE    := $(BIN_DIR)/pbc_to_exe@exe@
#IF(darwin):
#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@

LIB_SRCS := \
 $(LIBPATH)/luaaux.pir \
 $(LIBPATH)/luabasic.pir \
 $(LIBPATH)/luacoroutine.pir \
 $(LIBPATH)/luapackage.pir \
 $(LIBPATH)/luaregex.pir \
 $(LIBPATH)/luastring.pir \
 $(LIBPATH)/luatable.pir \
 $(LIBPATH)/luamath.pir \
 $(LIBPATH)/luaio.pir \
 $(LIBPATH)/luafile.pir \
 $(LIBPATH)/luaos.pir \
 $(LIBPATH)/luadebug.pir \
 $(LIBPATH)/luabytecode.pir

LIB_PBCS := \
 $(LIBPATH)/luaaux.pbc \
 $(LIBPATH)/luabasic.pbc \
 $(LIBPATH)/luacoroutine.pbc \
 $(LIBPATH)/luapackage.pbc \
 $(LIBPATH)/luaregex.pbc \
 $(LIBPATH)/luastring.pbc \
 $(LIBPATH)/luatable.pbc \
 $(LIBPATH)/luamath.pbc \
 $(LIBPATH)/luaio.pbc \
 $(LIBPATH)/luafile.pbc \
 $(LIBPATH)/luaos.pbc \
 $(LIBPATH)/luadebug.pbc \
 $(LIBPATH)/luabytecode.pbc

GEN_PIR := \
 lua/lua51_testlex_gen.pir \
 lua/dumplex_gen.pir \
 lua/lua51_gen.pir \
 lua/PASTGrammar_gen.pir \
 lua/POSTGrammar_gen.pir \
 $(LIBPATH)/More.pir \
 $(LIBPATH)/luabytecode_gen.pir

GEN_PBC := \
 lua/lua.pbc \
 lua.pbc \
 luap.pbc \
 lua/luad.pbc

LUA_GROUP := dynext/lua_group$(LOAD_EXT)

PMC_DEPS := \
 $(PMC_DIR)/Makefile.in \
 $(PMC_DIR)/lua.pmc \
 $(PMC_DIR)/luaany.pmc \
 $(PMC_DIR)/luaboolean.pmc \
 $(PMC_DIR)/luabytecode.pmc \
 $(PMC_DIR)/luafunction.pmc \
 $(PMC_DIR)/luanil.pmc \
 $(PMC_DIR)/luanumber.pmc \
 $(PMC_DIR)/luastring.pmc \
 $(PMC_DIR)/luatable.pmc \
 $(PMC_DIR)/luathread.pmc \
 $(PMC_DIR)/luauserdata.pmc

SOURCES := \
  lua/lua51.pir \
  lua/grammar51.pir \
  lua/lua51_gen.pir \
  lua/PASTGrammar_gen.pir \
  lua/POSTGrammar_gen.pir \
  $(LIB_SRCS)

DOCS := README

BUILD_CLEANUPS := \
  man \
  "*.pbc" \
  "lua/*.pbc" \
  "$(LIBPATH)/*.pbc" \
  $(GEN_PIR) \
  gl.lua \
  Test \
  "*.c" \
  "*$(O)" \
#IF(win32):  "parrot-*.exe" \
#IF(win32):  parrot-lua.iss \
#IF(win32):  "setup-parrot-*.exe" \
  installable_lua@exe@ \
  installable_luap@exe@

TEST_CLEANUPS := \
  "t/*.pir" \
  "t/*.lua" \
  "t/*.luac" \
  "t/*.orig_out" \
  "t/*.parrot_out"

build: build_core Test/More.pbc
	$(MAKE) $(LUALIB_DIR)

build_core: \
 $(LUA_GROUP) \
 $(LIB_PBCS) \
 $(LIBPATH)/luaperl.pbc \
 $(GEN_PBC) \
 lua/lua51_testlex_gen.pir \
 lua/dumplex_gen.pir \
 src/yapp/Lua/parser.pm

all: build installable

lua/lua51_testlex_gen.pir: lua/lua51_testlex.pg
	$(PGE) --output=lua/lua51_testlex_gen.pir lua/lua51_testlex.pg

lua/dumplex_gen.pir: lua/dumplex.tg
	$(TGE) --output=lua/dumplex_gen.pir lua/dumplex.tg

lua/lua51_gen.pir: lua/lua51.pg
	$(PGE) --output=lua/lua51_gen.pir lua/lua51.pg

lua/PASTGrammar_gen.pir: lua/PASTGrammar.tg
	$(TGE) --output=lua/PASTGrammar_gen.pir lua/PASTGrammar.tg

lua/POSTGrammar_gen.pir: lua/POSTGrammar.tg
	$(TGE) --output=lua/POSTGrammar_gen.pir lua/POSTGrammar.tg

lua/lua.pbc: $(SOURCES)
	$(PARROT) $(PARROT_ARGS) -o lua/lua.pbc lua/lua51.pir

lua.pbc: lua.pir
	$(PARROT) $(PARROT_ARGS) -o lua.pbc lua.pir

lua/luad.pbc: luad.pir
	$(PARROT) -o lua/luad.pbc --output-pbc luad.pir

luap.pbc: luap.pir
	$(PARROT) -o luap.pbc --output-pbc luap.pir

$(LUA_GROUP): $(PMC_DEPS)
	$(MAKE) $(PMC_DIR)

$(LIBPATH)/luaperl.pbc: $(LIBPATH)/luaperl.pir
	-$(PARROT) --output=$(LIBPATH)/luaperl.pbc $(LIBPATH)/luaperl.pir

$(LIBPATH)/luaaux.pbc: $(LIBPATH)/luaaux.pir
	-$(PARROT) --output=$(LIBPATH)/luaaux.pbc $(LIBPATH)/luaaux.pir

$(LIBPATH)/luabasic.pbc: $(LIBPATH)/luabasic.pir
	-$(PARROT) --output=$(LIBPATH)/luabasic.pbc $(LIBPATH)/luabasic.pir

$(LIBPATH)/luacoroutine.pbc: $(LIBPATH)/luacoroutine.pir
	-$(PARROT) --output=$(LIBPATH)/luacoroutine.pbc $(LIBPATH)/luacoroutine.pir

$(LIBPATH)/luapackage.pbc: $(LIBPATH)/luapackage.pir
	-$(PARROT) --output=$(LIBPATH)/luapackage.pbc $(LIBPATH)/luapackage.pir

$(LIBPATH)/luaregex.pbc: $(LIBPATH)/luaregex.pir
	-$(PARROT) --output=$(LIBPATH)/luaregex.pbc $(LIBPATH)/luaregex.pir

$(LIBPATH)/luastring.pbc: $(LIBPATH)/luastring.pir
	-$(PARROT) --output=$(LIBPATH)/luastring.pbc $(LIBPATH)/luastring.pir

$(LIBPATH)/luatable.pbc: $(LIBPATH)/luatable.pir
	-$(PARROT) --output=$(LIBPATH)/luatable.pbc $(LIBPATH)/luatable.pir

$(LIBPATH)/luamath.pbc: $(LIBPATH)/luamath.pir
	-$(PARROT) --output=$(LIBPATH)/luamath.pbc $(LIBPATH)/luamath.pir

$(LIBPATH)/luaio.pbc: $(LIBPATH)/luaio.pir
	-$(PARROT) --output=$(LIBPATH)/luaio.pbc $(LIBPATH)/luaio.pir

$(LIBPATH)/luafile.pbc: $(LIBPATH)/luafile.pir
	-$(PARROT) --output=$(LIBPATH)/luafile.pbc $(LIBPATH)/luafile.pir

$(LIBPATH)/luaos.pbc: $(LIBPATH)/luaos.pir
	-$(PARROT) --output=$(LIBPATH)/luaos.pbc $(LIBPATH)/luaos.pir

$(LIBPATH)/luadebug.pbc: $(LIBPATH)/luadebug.pir
	-$(PARROT) --output=$(LIBPATH)/luadebug.pbc $(LIBPATH)/luadebug.pir

$(LIBPATH)/luabytecode.pbc: $(LIBPATH)/luabytecode.pir $(LIBPATH)/luabytecode_gen.pir
	-$(PARROT) --output=$(LIBPATH)/luabytecode.pbc $(LIBPATH)/luabytecode.pir

$(LIBPATH)/luabytecode_gen.pir: $(LIBPATH)/luabytecode.rules build/translator.pl
	$(PERL) build/translator.pl $(LIBPATH)/luabytecode.rules \
            --output $(LIBPATH)/luabytecode_gen.pir

t/lua-TestMore/src/Test/More.lua:
	git submodule init t/lua-TestMore
	git submodule update

Test/More.pir: t/lua-TestMore/src/Test/More.lua
	-$(MKPATH) Test
	-$(CP) t/lua-TestMore/src/Test/More.lua Test/More.lua
	-$(PARROT) luap.pir --target=pir Test/More.lua > Test/More.pir

Test/More.pbc: Test/More.pir
	-$(PARROT) --output=Test/More.pbc Test/More.pir

src/yapp/Lua/parser.pm: src/yapp/Lua/lua51.yp
	yapp -v -m Lua::parser -o src/yapp/Lua/parser.pm src/yapp/Lua/lua51.yp

installable: installable_lua@exe@  installable_luap@exe@

installable_lua@exe@: lua.pbc
	$(PBC_TO_EXE) lua.pbc --install

installable_luap@exe@: luap.pbc
	$(PBC_TO_EXE) luap.pbc --install

Makefile: Makefile.in
	$(PARROT) Configure.pir

help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "  build:             lua.pbc"
	@echo "                     This is the default."
	@echo "  all:               lua.pbc installable"
	@echo "  installable:       Create libs and self-hosting binaries to be installed."
	@echo "  install:           Install the installable targets and docs."
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run the test suite."
	@echo "  codetest:          Run file metadata and coding standards tests."
	@echo "  testclean:         Clean up test results."
	@echo ""
	@echo "Smoke Testing:"
	@echo "  smolder:           Run the test suite and send report to the smolder server"
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleaning up."
	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
	@echo "  distclean:         Removes also anything built, in theory"
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""

oldtest: build
	$(PERL) -I$(LIB_DIR)/tools/lib t/harness

pmctest: build
	prove -f t/pmc/*.t

#IF(gmake_version):export LUA_PATH=;;../src/?.lua
#IF(gmake_version):export LUA_INIT=platform = { osname=[[@osname@]], intsize=@intsize@, longsize=@longsize@ }
#UNLESS(gmake_version):# before running test, modify your environment :
#UNLESS(gmake_version):#  $ export LUA_PATH=";;../src/?.lua"
#UNLESS(gmake_version):#  $ export LUA_INIT="platform = { osname=[[@osname@]], intsize=@intsize@, longsize=@longsize@ }"
#UNLESS(gmake_version):# or
#UNLESS(gmake_version):#  > set LUA_PATH=;;../src/?.lua
#UNLESS(gmake_version):#  > set LUA_INIT=platform = { osname=[[@osname@]], intsize=@intsize@, longsize=@longsize@ }

.PHONY : test

test :
	prove -f --exec="$(PARROT) lua.pbc" --jobs 1 \
	    t/lua-TestMore/test_lua51//*.t \
	    t/lua-TestMore/test_lua51/lib//*.t

spectest :
	prove -f --exec="$(PARROT) lua.pbc" --jobs 1 \
	    t/lua-TestMore/test_lua51//*.t \

smolder :
	-prove -f --archive=test_lua51.tar.gz --exec="$(PARROT) lua.pbc" --jobs 1 \
	    t/lua-TestMore/test_lua51//*.t \
	curl -F architecture=@cpuarch@ \
	     -F platform=@osname@ \
	     -F revision=@revision@ \
	     -F tags="@osname@, @archname@, parrot-lua, Lua 5.1 (on Parrot)" \
	     -F comments=parrot-lua \
	     -F report_file=@t//lua-TestMore//test_lua51//test_lua51.tar.gz \
	        http:////smolder.plusthree.com//app//public_projects//process_add_report//12

codetest: codetest-c codetest-make codetest-perl codetest-pir codetest-pod

T_C     = dynext//pmc//*.pmc dynext//pmc//lua_private.h
T_MAKE  = Makefile.in dynext//pmc//Makefile.in lua//library//Makefile.in
T_PERL  = Configure.pl t//harness t//*.t t//Parrot//Test//*.pm \
          build//*.pl src//yapp//Lua//*.pm
T_PIR   = *.pir lua//lua51.pir lua//grammar51.pir lua//lib//*.pir lua//library//*.pir t//pmc//*.t
T_POD   = doc//*.pod

codetest-c:
	- $(PROVE) @build_dir@/t/codingstd/c_code_coda.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_cppcomments.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_indent.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_macro_args.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_operator.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_parens.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_returns.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/cuddled_else.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/filenames.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/tabs.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/pod_syntax.t $(T_C)

codetest-make:
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_MAKE)
	- $(PROVE) @build_dir@/t/codingstd/filenames.t $(T_MAKE)
	- $(PROVE) @build_dir@/t/codingstd/make_code_coda.t $(T_MAKE)
	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_MAKE)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_MAKE)

codetest-perl: clean
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/cuddled_else.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/filenames.t $(T_PERL)
#	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/perlcritic.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/pod_syntax.t $(T_PERL)

codetest-pir: clean
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/filenames.t $(T_PIR)
#	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/pir_code_coda.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/tabs.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/pod_syntax.t $(T_PIR)

codetest-pod:
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_POD)
	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_POD)
	- $(PROVE) @build_dir@/t/codingstd/tabs.t $(T_POD)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_POD)
	- $(PROVE) @build_dir@/t/codingstd/pod_syntax.t $(T_POD)

test-installable: installable
	./installable_lua@exe@ -e "print 'ok'"

install: installable
	$(MAKE) $(PMC_DIR) install
	$(CP) installable_lua@exe@ $(BIN_DIR)/parrot-lua@exe@
	$(CHMOD) 0755 $(BIN_DIR)/parrot-lua@exe@
	$(CP) installable_luap@exe@ $(BIN_DIR)/parrot-luap@exe@
	$(CHMOD) 0755 $(BIN_DIR)/parrot-luap@exe@
	-$(MKPATH) $(LIB_DIR)/languages/lua
	$(CP) lua/*.pbc $(LIB_DIR)/languages/lua
	-$(MKPATH) $(MANDIR)/man1
	pod2man lua.pir > $(MANDIR)/man1/parrot-lua.1
	pod2man luap.pir > $(MANDIR)/man1/parrot-luap.1
	-$(MKPATH) $(DOC_DIR)/languages/lua
	$(CP) $(DOCS) $(DOC_DIR)/languages/lua
	$(CP) doc/*.pod $(DOC_DIR)/languages/lua
	$(MAKE) $(LUALIB_DIR) install

uninstall:
	$(MAKE) $(LUALIB_DIR) uninstall
	$(MAKE) $(PMC_DIR) uninstall
	$(RM_F) $(BIN_DIR)/parrot-lua@exe@
	$(RM_F) $(BIN_DIR)/parrot-luap@exe@
	$(RM_RF) $(LIB_DIR)/languages/lua
	$(RM_F) $(MANDIR)/man1/parrot-lua.1
	$(RM_RF) $(DOC_DIR)/languages/lua

win32-inno-installer: installable
	-$(MKPATH) man/man1
	pod2man lua.pir > man/man1/parrot-lua.1
	pod2man luap.pir > man/man1/parrot-luap.1
	-$(MKPATH) man/html
	pod2html --infile lua.pir --outfile man/html/parrot-lua.html
	pod2html --infile luap.pir --outfile man/html/parrot-luap.html
	$(CP) installable_lua@exe@ parrot-lua@exe@
	$(CP) installable_luap@exe@ parrot-luap@exe@
	$(PERL) -I$(LIB_DIR)/tools/lib $(LIB_DIR)/tools/dev/mk_inno_language.pl lua
	iscc parrot-lua.iss

oldtestclean:
	$(RM_F) $(TEST_CLEANUPS)

clean:
	$(MAKE) $(PMC_DIR) clean
	$(MAKE) $(LUALIB_DIR) clean
	$(RM_RF) $(TEST_CLEANUPS) $(BUILD_CLEANUPS)

realclean:
	$(MAKE) $(PMC_DIR) realclean
	$(MAKE) $(LUALIB_DIR) realclean
	$(RM_RF) $(TEST_CLEANUPS) $(BUILD_CLEANUPS) Makefile

distclean: realclean

# Local variables:
#   mode: makefile
# End:
# vim: ft=make:

